/*
A peak element is an element that is greater than its neighbors.

Given an input array where num[i] ¡Ù num[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that num[-1] = num[n] = -¡Þ.

For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.
*/

#include <Windows.h>
#include <iostream>
#include <vector>

using namespace std;

void Create(vector<int> &vec, int n)
{
	int r, count = 0;
	for (int i=0; i<n; i++)
	{
		r = rand() % 100;
		vec.push_back(r);
	}
}

void Print(vector<int> &vec)
{
	int count = 0;
	for (int i=0; i<vec.size(); i++)
	{
		printf("%d ", vec[i]);
		if (++count % 16 ==0)
		{
			printf("\n");
		}
	}
	printf("\n");
}


class Solution
{
public:
	int findPeakElement(const vector<int> &num)
	{
		int n = num.size();
		int begin = 0, end = n;
		int pos = (begin + end) / 2;
		bool bFind = false;
		while(pos > 0 && pos < n-1)
		{
			if (num[pos-1] < num[pos])
			{
				if (num[pos+1] < num[pos])
				{
					bFind = true;
					break;
				}
				begin = pos;
				pos = (begin + end) / 2;
			}
			else
			{
				end = pos;
				pos = (begin + end) / 2;
			}
		}

		if (!bFind)
		{
			bool increase = num[n-1] - num[0] > 0;
			if (increase)
			{
				pos = n-1;
			}
			else
			{
				pos = 0;
			}
		}

		return pos;
	}
};

int main()
{
	srand(GetTickCount());
	
	int a[] = {-9989,-9963,-9922,-9913,-9857,-9851,-9838,-9821,-9819,-9772,-9760,-9724,-9711,-9700,-9614,-9612,-9558,-9552,-9521,-9508,-9496,-9494,-9474,-9469,-9465,-9430,-9289,-9223,-9172,-9152,-9141,-9122,-9111,-9049,-9046,-8993,-8972,-8957,-8933,-8931,-8854,-8714,-8686,-8664,-8643,-8604,-8573,-8570,-8509,-8507,-8495,-8465,-8461,-8392,-8281,-8253,-8204,-8156,-8123,-8113,-7988,-7893,-7884,-7844,-7838,-7827,-7796,-7775,-7767,-7686,-7614,-7605,-7584,-7508,-7501,-7499,-7449,-7442,-7362,-7345,-7328,-7316,-7311,-7270,-7260,-7258,-7223,-7194,-7193,-7173,-7142,-7135,-7120,-7106,-7103,-6997,-6957,-6923,-6888,-6886,-6879,-6876,-6816,-6720,-6698,-6680,-6616,-6586,-6568,-6558,-6445,-6436,-6407,-6405,-6399,-6392,-6390,-6386,-6370,-6349,-6339,-6284,-6264,-6245,-6244,-6243,-6227,-6120,-6098,-6097,-6095,-6094,-6077,-6072,-6062,-6038,-5904,-5873,-5805,-5787,-5773,-5687,-5659,-5657,-5648,-5641,-5627,-5615,-5568,-5555,-5473,-5425,-5387,-5377,-5370,-5360,-5357,-5294,-5286,-5260,-5250,-5192,-5191,-5163,-5112,-5107,-5007,-4986,-4865,-4861,-4835,-4803,-4788,-4770,-4717,-4632,-4591,-4584,-4583,-4536,-4455,-4437,-4436,-4427,-4377,-4372,-4320,-4227,-4185,-4182,-4140,-4081,-4076,-4064,-3989,-3919,-3808,-3742,-3693,-3638,-3622,-3569,-3490,-3450,-3404,-3331,-3320,-3278,-3247,-3237,-3197,-3176,-3157,-3086,-3081,-3076,-3070,-3013,-2985,-2976,-2900,-2808,-2658,-2639,-2638,-2576,-2500,-2497,-2476,-2407,-2353,-2248,-2243,-2231,-2215,-2146,-2115,-2103,-2050,-2018,-2006,-1941,-1924,-1862,-1785,-1781,-1778,-1776,-1734,-1704,-1679,-1678,-1617,-1615,-1570,-1569,-1526,-1501,-1490,-1452,-1437,-1425,-1386,-1381,-1341,-1317,-1308,-1273,-1247,-1232,-1160,-1151,-1052,-1026,-1013,-1001,-953,-826,-749,-721,-668,-643,-637,-618,-617,-616,-565,-491,-456,-449,-413,-407,-382,-381,-361,-356,-346,-311,-268,-267,-241,-237,-232,-228,-170,-148,-114,-99,-66,-10,-6,17,59,72,165,178,180,189,200,216,233,270,275,332,350,357,386,431,432,493,526,531,541,558,581,584,651,672,674,765,781,858,875,926,1001,1021,1047,1075,1093,1200,1247,1263,1279,1288,1330,1400,1401,1424,1487,1558,1640,1693,1712,1767,1799,1853,1890,1905,1923,1926,2137,2143,2171,2209,2261,2263,2271,2293,2345,2371,2411,2421,2430,2463,2494,2496,2534,2565,2568,2628,2638,2656,2657,2664,2667,2670,2676,2717,2761,2767,2822,2891,2896,2900,2967,3020,3044,3052,3137,3142,3174,3182,3186,3204,3218,3224,3242,3273,3280,3302,3309,3325,3327,3398,3404,3423,3434,3552,3557,3577,3604,3609,3650,3667,3670,3676,3718,3720,3726,3755,3771,3852,3857,3879,3929,3966,4008,4059,4136,4160,4202,4289,4326,4331,4341,4353,4364,4398,4399,4444,4490,4505,4519,4532,4543,4613,4616,4636,4696,4787,4829,4832,4864,4874,4897,4954,5021,5029,5039,5044,5063,5176,5189,5220,5257,5296,5301,5372,5394,5395,5406,5411,5421,5433,5480,5500,5515,5544,5556,5564,5588,5605,5648,5728,5761,5777,5804,5823,5825,5830,5894,5926,5929,6001,6022,6038,6063,6067,6072,6088,6093,6104,6176,6188,6191,6196,6201,6288,6317,6322,6357,6379,6398,6402,6496,6513,6555,6632,6652,6702,6713,6809,6819,6829,6849,6850,6858,6919,6936,7034,7044,7048,7085,7099,7133,7140,7171,7188,7223,7261,7290,7296,7317,7321,7377,7395,7398,7512,7521,7543,7607,7695,7728,7743,7756,7811,7825,7831,7850,7869,7928,7955,7966,7975,7995,8003,8082,8092,8098,8164,8168,8259,8265,8284,8289,8308,8392,8405,8408,8469,8487,8517,8525,8526,8537,8569,8652,8670,8680,8690,8749,8757,8767,8803,8873,8890,9015,9016,9021,9029,9036,9047,9048,9065,9082,9157,9215,9224,9258,9278,9293,9311,9355,9356,9398,9515,9520,9521,9523,9538,9570,9604,9654,9661,9685,9712,9739,9753,9777,9841,9851,9867,9876,9896,9900,9922,9944,9811,9797,9796,9755,9732,9731,9723,9719,9687,9676,9617,9561,9359,9299,9277,9155,9124,9091,9056,9031,9009,8859,8844,8732,8727,8724,8718,8660,8651,8644,8637,8617,8584,8577,8576,8467,8404,8380,8356,8257,8255,8239,8231,8213,8112,8109,8094,8018,8013,7983,7886,7871,7818,7700,7689,7615,7557,7474,7424,7380,7276,7233,7091,6971,6933,6930,6918,6786,6638,6617,6604,6549,6509,6478,6336,6325,6296,6248,6180,6139,6119,6059,5940,5937,5923,5792,5786,5785,5723,5713,5615,5483,5389,5267,5238,5164,5133,5120,5117,5111,5047,5019,4957,4934,4912,4794,4727,4694,4665,4581,4500,4492,4478,4419,4410,4387,4378,4377,4373,4328,4320,4313,4299,4233,4168,4149,3983,3945,3936,3925,3774,3597,3588,3587,3582,3509,3472,3333,3181,3070,3053,2892,2876,2844,2596,2589,2574,2559,2354,2288,2242,2234,2230,2191,2025,1987,1957,1901,1809,1691,1586,1582,1565,1530,1479,1259,1226,1175,1030,915,870,809,648,613,612,604,590,529,428,375,309,294,252,244,239,220,116,99,20,6,-48,-79,-103,-180,-243,-395,-477,-488,-687,-715,-765,-776,-891,-1042,-1183,-1191,-1214,-1235,-1339,-1350,-1357,-1383,-1427,-1565,-1681,-1685,-1719,-1835,-1914,-1958,-2101,-2139,-2194,-2218,-2259,-2307,-2385,-2540,-2636,-2722,-2744,-2746,-2855,-2970,-2999,-3068,-3121,-3255,-3285,-3341,-3436,-3546,-3680,-3800,-3851,-3852,-3862,-3909,-3917,-3926,-4030,-4117,-4190,-4408,-4525,-4527,-4535,-4579,-4752,-4757,-4807,-4844,-4887,-5062,-5164,-5219,-5327,-5391,-5519,-5556,-5631,-5745,-5788,-5871,-5939,-6048,-6066,-6118,-6145,-6152,-6221,-6273,-6286,-6442,-6468,-6516,-6593,-6631,-6647,-6687,-6693,-6736,-6758,-6761,-6820,-6846,-6869,-6953,-6996,-7043,-7107,-7126,-7262,-7358,-7365,-7472,-7533,-7633,-7693,-7709,-7734,-7744,-7807,-7855,-8048,-8225,-8309,-8318,-8435,-8504,-8535,-8637,-8670,-8672,-8680,-8745,-8763,-8765,-9018,-9106,-9156,-9185,-9256,-9272,-9380,-9394,-9416,-9562,-9563,-9670,-9824,-9866,-9899};
	//int a[] = {5, 4, 3, 2, 1};
	vector<int> v;
	v.insert(v.begin(), a, a+sizeof(a)/sizeof(int));
	//Create(v, 10);
	Print(v);

	Solution s;

	cout<<s.findPeakElement(v);

	system("pause");

	return 0;
}